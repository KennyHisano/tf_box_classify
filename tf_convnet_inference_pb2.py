# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tf_convnet_inference.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='tf_convnet_inference.proto',
  package='tensorflow.serving',
  syntax='proto3',
  serialized_pb=_b('\n\x1atf_convnet_inference.proto\x12\x12tensorflow.serving\")\n\x0f\x42oxImageRequest\x12\x16\n\nimage_data\x18\x01 \x03(\x02\x42\x02\x10\x01\"%\n\x10\x42oxImageResponse\x12\x11\n\x05value\x18\x01 \x03(\x02\x42\x02\x10\x01\x32h\n\x0f\x42oxImageService\x12U\n\x08\x43lassify\x12#.tensorflow.serving.BoxImageRequest\x1a$.tensorflow.serving.BoxImageResponseb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_BOXIMAGEREQUEST = _descriptor.Descriptor(
  name='BoxImageRequest',
  full_name='tensorflow.serving.BoxImageRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='image_data', full_name='tensorflow.serving.BoxImageRequest.image_data', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=91,
)


_BOXIMAGERESPONSE = _descriptor.Descriptor(
  name='BoxImageResponse',
  full_name='tensorflow.serving.BoxImageResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='tensorflow.serving.BoxImageResponse.value', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=93,
  serialized_end=130,
)

DESCRIPTOR.message_types_by_name['BoxImageRequest'] = _BOXIMAGEREQUEST
DESCRIPTOR.message_types_by_name['BoxImageResponse'] = _BOXIMAGERESPONSE

BoxImageRequest = _reflection.GeneratedProtocolMessageType('BoxImageRequest', (_message.Message,), dict(
  DESCRIPTOR = _BOXIMAGEREQUEST,
  __module__ = 'tf_convnet_inference_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.serving.BoxImageRequest)
  ))
_sym_db.RegisterMessage(BoxImageRequest)

BoxImageResponse = _reflection.GeneratedProtocolMessageType('BoxImageResponse', (_message.Message,), dict(
  DESCRIPTOR = _BOXIMAGERESPONSE,
  __module__ = 'tf_convnet_inference_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.serving.BoxImageResponse)
  ))
_sym_db.RegisterMessage(BoxImageResponse)


_BOXIMAGEREQUEST.fields_by_name['image_data'].has_options = True
_BOXIMAGEREQUEST.fields_by_name['image_data']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
_BOXIMAGERESPONSE.fields_by_name['value'].has_options = True
_BOXIMAGERESPONSE.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class BetaBoxImageServiceServicer(object):
  def Classify(self, request, context):
    """Classifies image into digits.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaBoxImageServiceStub(object):
  def Classify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Classifies image into digits.
    """
    raise NotImplementedError()
  Classify.future = None


def beta_create_BoxImageService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('tensorflow.serving.BoxImageService', 'Classify'): BoxImageRequest.FromString,
  }
  response_serializers = {
    ('tensorflow.serving.BoxImageService', 'Classify'): BoxImageResponse.SerializeToString,
  }
  method_implementations = {
    ('tensorflow.serving.BoxImageService', 'Classify'): face_utilities.unary_unary_inline(servicer.Classify),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_BoxImageService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('tensorflow.serving.BoxImageService', 'Classify'): BoxImageRequest.SerializeToString,
  }
  response_deserializers = {
    ('tensorflow.serving.BoxImageService', 'Classify'): BoxImageResponse.FromString,
  }
  cardinalities = {
    'Classify': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'tensorflow.serving.BoxImageService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
